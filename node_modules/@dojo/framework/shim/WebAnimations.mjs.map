{"version":3,"file":"WebAnimations.mjs","sourceRoot":"","sources":["WebAnimations.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,qBAAqB,CAAC;AACtB,OAAO,gDAAgD,CAAC;AAoHxD,MAAM,CAAC,MAAM,SAAS,GAAG,MAAM,CAAC,SAAiC,CAAC;AAClE,MAAM,CAAC,MAAM,cAAc,GAAG,MAAM,CAAC,cAA2C,CAAC","sourcesContent":["import global from './global';\n`!has('build-elide')`;\nimport 'web-animations-js/web-animations-next-lite.min';\n\nexport type AnimationEffectTimingFillMode = 'none' | 'forwards' | 'backwards' | 'both' | 'auto';\nexport type AnimationEffectTimingPlaybackDirection = 'normal' | 'reverse' | 'alternate' | 'alternate-reverse';\nexport type AnimationPlayState = 'idle' | 'running' | 'paused' | 'finished';\n\nexport interface AnimationPlaybackEvent {\n\ttarget: Animation;\n\treadonly currentTime: number | null;\n\treadonly timelineTime: number | null;\n\ttype: string;\n\tbubbles: boolean;\n\tcancelable: boolean;\n\tcurrentTarget: Animation;\n\tdefaultPrevented: boolean;\n\teventPhase: number;\n\ttimeStamp: number;\n}\n\nexport interface AnimationPlaybackEventInit extends EventInit {\n\tcurrentTime?: number | null;\n\ttimelineTime?: number | null;\n}\n\ndeclare var AnimationPlaybackEvent: {\n\tprototype: AnimationPlaybackEvent;\n\tnew (type: string, eventInitDict?: AnimationPlaybackEventInit): AnimationPlaybackEvent;\n};\n\nexport interface AnimationKeyFrame {\n\teasing?: string | string[];\n\toffset?: number | Array<number | null> | null;\n\topacity?: number | number[];\n\ttransform?: string | string[];\n}\n\nexport interface AnimationTimeline {\n\treadonly currentTime: number | null;\n\tgetAnimations(): Animation[];\n\tplay(effect: KeyframeEffect): Animation;\n}\n\nexport interface AnimationEffectTiming {\n\tdelay?: number;\n\tdirection?: AnimationEffectTimingPlaybackDirection;\n\tduration?: number;\n\teasing?: string;\n\tendDelay?: number;\n\tfill?: AnimationEffectTimingFillMode;\n\titerationStart?: number;\n\titerations?: number;\n\tplaybackRate?: number;\n}\n\nexport interface AnimationEffectReadOnly {\n\treadonly timing: number;\n\tgetComputedTiming(): ComputedTimingProperties;\n}\n\nexport interface ComputedTimingProperties {\n\tendTime: number;\n\tactiveDuration: number;\n\tlocalTime: number | null;\n\tprogress: number | null;\n\tcurrentIteration: number | null;\n}\n\nexport interface KeyframeEffect extends AnimationEffectReadOnly {\n\tactiveDuration: number;\n\tonsample: (timeFraction: number | null, effect: KeyframeEffect, animation: Animation) => void | undefined;\n\tparent: KeyframeEffect | null;\n\ttarget: HTMLElement;\n\ttiming: number;\n\tgetComputedTiming(): ComputedTimingProperties;\n\tgetFrames(): AnimationKeyFrame[];\n\tremove(): void;\n}\n\nexport interface KeyframeEffectConstructor {\n\tprototype: KeyframeEffect;\n\tnew (\n\t\ttarget: HTMLElement,\n\t\teffect: AnimationKeyFrame | AnimationKeyFrame[],\n\t\ttiming: number | AnimationEffectTiming,\n\t\tid?: string\n\t): KeyframeEffect;\n}\n\nexport type AnimationEventListener = (this: Animation, evt: AnimationPlaybackEvent) => any;\n\nexport interface Animation extends EventTarget {\n\tcurrentTime: number | null;\n\tid: string;\n\toncancel: AnimationEventListener;\n\tonfinish: AnimationEventListener;\n\treadonly playState: AnimationPlayState;\n\tplaybackRate: number;\n\tstartTime: number;\n\tcancel(): void;\n\tfinish(): void;\n\tpause(): void;\n\tplay(): void;\n\treverse(): void;\n\taddEventListener(type: 'finish' | 'cancel', handler: EventListener): void;\n\tremoveEventListener(type: 'finish' | 'cancel', handler: EventListener): void;\n\teffect: AnimationEffectReadOnly;\n\treadonly finished: Promise<Animation>;\n\treadonly ready: Promise<Animation>;\n\ttimeline: AnimationTimeline;\n}\n\nexport interface AnimationConstructor {\n\tprototype: Animation;\n\tnew (effect?: AnimationEffectReadOnly, timeline?: AnimationTimeline): Animation;\n}\n\nexport const Animation = global.Animation as AnimationConstructor;\nexport const KeyframeEffect = global.KeyframeEffect as KeyframeEffectConstructor;\n"]}