/**
 * Used through the toolkit as a consistent API to manage how callers can "cleanup"
 * when doing a function.
 */
export interface Handle {
    /**
     * Perform the destruction/cleanup logic associated with this Handle
     */
    destroy(): void;
}
export declare class Destroyable {
    /**
     * The instance's handles
     */
    private handles;
    /**
     * @constructor
     */
    constructor();
    /**
     * Register handles for the instance that will be destroyed when `this.destroy` is called
     *
     * @param {Handle} handle The handle to add for the instance
     * @returns {Handle} A wrapper Handle. When the wrapper Handle's `destroy` method is invoked, the original handle is
     *                   removed from the instance, and its `destroy` method is invoked.
     */
    own(handle: Handle): Handle;
    /**
     * Destroys all handlers registered for the instance
     *
     * @returns {Promise<any} A Promise that resolves once all handles have been destroyed
     */
    destroy(): Promise<any>;
}
export default Destroyable;
