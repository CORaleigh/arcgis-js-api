import { WNode, VNode, VNodeProperties, TransitionStrategy, DomVNode } from './interfaces';
import { Registry } from './Registry';
import { WidgetBase } from './WidgetBase';
export interface BaseNodeWrapper {
    node: WNode | VNode;
    domNode?: Node;
    childrenWrappers?: DNodeWrapper[];
    depth: number;
    order: number;
    requiresInsertBefore?: boolean;
    hasPreviousSiblings?: boolean;
    hasParentWNode?: boolean;
    namespace?: string;
    hasAnimations?: boolean;
}
export interface WNodeWrapper extends BaseNodeWrapper {
    node: WNode;
    instance?: WidgetBase;
    mergeNodes?: Node[];
    nodeHandlerCalled?: boolean;
}
export interface VNodeWrapper extends BaseNodeWrapper {
    node: VNode | DomVNode;
    merged?: boolean;
    decoratedDeferredProperties?: VNodeProperties;
    inserted?: boolean;
}
export declare type DNodeWrapper = VNodeWrapper | WNodeWrapper;
export interface MountOptions {
    sync: boolean;
    merge: boolean;
    transition: TransitionStrategy;
    domNode: HTMLElement;
    registry: Registry | null;
}
export interface Renderer {
    invalidate(): void;
    mount(mountOptions?: Partial<MountOptions>): void;
}
export declare function renderer(renderer: () => WNode | VNode): Renderer;
export default renderer;
