(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../WidgetBase", "./../vdom", "../d", "../decorators/alwaysRender"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var WidgetBase_1 = require("../WidgetBase");
    var vdom_1 = require("./../vdom");
    var d_1 = require("../d");
    var alwaysRender_1 = require("../decorators/alwaysRender");
    var ProjectorAttachState;
    (function (ProjectorAttachState) {
        ProjectorAttachState[ProjectorAttachState["Attached"] = 1] = "Attached";
        ProjectorAttachState[ProjectorAttachState["Detached"] = 2] = "Detached";
    })(ProjectorAttachState = exports.ProjectorAttachState || (exports.ProjectorAttachState = {}));
    var ProjectorWidget = /** @class */ (function (_super) {
        tslib_1.__extends(ProjectorWidget, _super);
        function ProjectorWidget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProjectorWidget.prototype.render = function () {
            return this.properties.renderer();
        };
        ProjectorWidget = tslib_1.__decorate([
            alwaysRender_1.alwaysRender()
        ], ProjectorWidget);
        return ProjectorWidget;
    }(WidgetBase_1.default));
    function ProjectorMixin(Base) {
        var Projector = /** @class */ (function () {
            function Projector() {
                this._root = document.body;
                this._async = true;
                this._properties = {};
                this._widget = Base;
            }
            Projector.prototype.append = function (root) {
                var _this = this;
                if (root === void 0) { root = this._root; }
                this._root = root;
                this._renderResult = d_1.w(ProjectorWidget, {
                    renderer: function () {
                        var _a = _this._properties, registry = _a.registry, props = tslib_1.__rest(_a, ["registry"]);
                        return d_1.w(_this._widget, props, _this._children);
                    }
                });
                this._renderer = vdom_1.renderer(function () { return _this._renderResult; });
                this._renderer.mount({
                    domNode: root,
                    registry: this._properties.registry,
                    sync: !this.async
                });
                this.projectorState = ProjectorAttachState.Attached;
                return {
                    destroy: function () { }
                };
            };
            Projector.prototype.merge = function (root) {
                if (root === void 0) { root = document.body; }
                return this.append(root.parentNode || undefined);
            };
            Object.defineProperty(Projector.prototype, "root", {
                get: function () {
                    return this._root;
                },
                set: function (root) {
                    if (this.projectorState === ProjectorAttachState.Attached) {
                        throw new Error('Projector already attached, cannot change root element');
                    }
                    this._root = root;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Projector.prototype, "async", {
                get: function () {
                    return this._async;
                },
                set: function (async) {
                    if (this.projectorState === ProjectorAttachState.Attached) {
                        throw new Error('Projector already attached, cannot change async mode');
                    }
                    this._async = async;
                },
                enumerable: true,
                configurable: true
            });
            Projector.prototype.sandbox = function (doc) {
                if (doc === void 0) { doc = document; }
                if (this.projectorState === ProjectorAttachState.Attached) {
                    throw new Error('Projector already attached, cannot create sandbox');
                }
                this._async = false;
                this.append(doc.createDocumentFragment());
            };
            Projector.prototype.setChildren = function (children) {
                this._children = children;
                if (this._renderer) {
                    this._renderer.invalidate();
                }
            };
            Projector.prototype.setProperties = function (properties) {
                this._properties = properties;
                if (this._renderer) {
                    this._renderer.invalidate();
                }
            };
            Projector.prototype.toHtml = function () {
                if (this.projectorState !== ProjectorAttachState.Attached) {
                    throw new Error('Projector is not attached, cannot return an HTML string of projection.');
                }
                return this._root.childNodes[0].outerHTML;
            };
            Projector.prototype.destroy = function () { };
            return Projector;
        }());
        return Projector;
    }
    exports.ProjectorMixin = ProjectorMixin;
    exports.default = ProjectorMixin;
});
//# sourceMappingURL=Projector.js.map