import { Constructor, DNode } from '../interfaces';
import WidgetBase from '../WidgetBase';
import { Handle } from '../../core/Destroyable';
import Registry from '../Registry';
export declare enum ProjectorAttachState {
    Attached = 1,
    Detached = 2,
}
export interface ProjectorProperties {
    registry?: Registry;
}
export interface ProjectorMixin<T extends WidgetBase> {
    append(root?: Element): Handle;
    merge(root?: Element): Handle;
    sandbox(doc?: Document): void;
    setProperties(properties: T['properties'] & ProjectorProperties): void;
    setChildren(children: DNode[]): void;
    toHtml(): string;
    async: boolean;
    root: Element;
    destroy(): void;
    readonly projectorState: ProjectorAttachState;
}
export declare function ProjectorMixin<P, T extends WidgetBase<P>>(Base: Constructor<T>): Constructor<ProjectorMixin<T>>;
export default ProjectorMixin;
