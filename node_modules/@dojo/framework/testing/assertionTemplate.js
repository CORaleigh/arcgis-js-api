(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "./support/selector", "../widget-core/d"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var selector_1 = require("./support/selector");
    var d_1 = require("../widget-core/d");
    var findOne = function (nodes, selector) {
        if (selector.indexOf('~') === 0) {
            selector = "[\\~key='" + selector.substr(1) + "']";
        }
        var _a = tslib_1.__read(selector_1.default(selector, nodes), 1), node = _a[0];
        return node;
    };
    var guard = function (node) {
        if (!node) {
            throw Error('Node not found');
        }
        if (!d_1.isWNode(node) && !d_1.isVNode(node)) {
            throw Error('Cannot set or get on unknown node');
        }
        return node;
    };
    function assertionTemplate(renderFunc) {
        var assertionTemplateResult = function () {
            var render = renderFunc();
            d_1.decorate(render, function (node) {
                if (d_1.isWNode(node) || d_1.isVNode(node)) {
                    delete node.properties['~key'];
                }
            });
            return render;
        };
        assertionTemplateResult.setProperty = function (selector, property, value) {
            var render = renderFunc();
            var node = guard(findOne(render, selector));
            node.properties[property] = value;
            return assertionTemplate(function () { return render; });
        };
        assertionTemplateResult.setChildren = function (selector, children) {
            var render = renderFunc();
            var node = guard(findOne(render, selector));
            node.children = children;
            return assertionTemplate(function () { return render; });
        };
        assertionTemplateResult.getProperty = function (selector, property) {
            var render = renderFunc();
            var node = guard(findOne(render, selector));
            return node.properties[property];
        };
        assertionTemplateResult.getChildren = function (selector) {
            var render = renderFunc();
            var node = guard(findOne(render, selector));
            return node.children || [];
        };
        return assertionTemplateResult;
    }
    exports.assertionTemplate = assertionTemplate;
    exports.default = assertionTemplate;
});
//# sourceMappingURL=assertionTemplate.js.map