{"version":3,"file":"assertionTemplate.js","sourceRoot":"","sources":["assertionTemplate.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,+CAAwC;IACxC,sCAA8D;IAW9D,IAAM,OAAO,GAAG,UAAC,KAAsB,EAAE,QAAgB;QACxD,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjC,QAAQ,GAAG,cAAY,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,OAAI,CAAC;QAC/C,CAAC;QACK,IAAA,2DAAgC,EAA/B,YAAI,CAA4B;QACvC,MAAM,CAAC,IAAI,CAAC;IACb,CAAC,CAAC;IAIF,IAAM,KAAK,GAAG,UAAC,IAAW;QACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,MAAM,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAC/B,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,WAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,KAAK,CAAC,mCAAmC,CAAC,CAAC;QAClD,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACb,CAAC,CAAC;IAEF,2BAAkC,UAAiC;QAClE,IAAM,uBAAuB,GAAQ;YACpC,IAAM,MAAM,GAAG,UAAU,EAAE,CAAC;YAC5B,YAAQ,CAAC,MAAM,EAAE,UAAC,IAAI;gBACrB,EAAE,CAAC,CAAC,WAAO,CAAC,IAAI,CAAC,IAAI,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACpC,OAAQ,IAA2B,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACxD,CAAC;YACF,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC;QACf,CAAC,CAAC;QACF,uBAAuB,CAAC,WAAW,GAAG,UAAC,QAAgB,EAAE,QAAgB,EAAE,KAAU;YACpF,IAAM,MAAM,GAAG,UAAU,EAAE,CAAC;YAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;YAClC,MAAM,CAAC,iBAAiB,CAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC;QACxC,CAAC,CAAC;QACF,uBAAuB,CAAC,WAAW,GAAG,UAAC,QAAgB,EAAE,QAAiB;YACzE,IAAM,MAAM,GAAG,UAAU,EAAE,CAAC;YAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,MAAM,CAAC,iBAAiB,CAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC;QACxC,CAAC,CAAC;QACF,uBAAuB,CAAC,WAAW,GAAG,UAAC,QAAgB,EAAE,QAAgB;YACxE,IAAM,MAAM,GAAG,UAAU,EAAE,CAAC;YAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC,CAAC;QACF,uBAAuB,CAAC,WAAW,GAAG,UAAC,QAAgB;YACtD,IAAM,MAAM,GAAG,UAAU,EAAE,CAAC;YAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;QAC5B,CAAC,CAAC;QACF,MAAM,CAAC,uBAAkD,CAAC;IAC3D,CAAC;IAjCD,8CAiCC;IAED,kBAAe,iBAAiB,CAAC","sourcesContent":["import select from './support/selector';\nimport { isWNode, isVNode, decorate } from '../widget-core/d';\nimport { VNode, WNode, DNode } from '../widget-core/interfaces';\n\nexport interface AssertionTemplateResult {\n\t(): DNode | DNode[];\n\tsetChildren(selector: string, children: DNode[]): AssertionTemplateResult;\n\tsetProperty(selector: string, property: string, value: any): AssertionTemplateResult;\n\tgetChildren(selector: string): DNode[];\n\tgetProperty(selector: string, property: string): any;\n}\n\nconst findOne = (nodes: DNode | DNode[], selector: string): DNode | undefined => {\n\tif (selector.indexOf('~') === 0) {\n\t\tselector = `[\\\\~key='${selector.substr(1)}']`;\n\t}\n\tconst [node] = select(selector, nodes);\n\treturn node;\n};\n\ntype NodeWithProperties = (VNode | WNode) & { properties: { [index: string]: any } };\n\nconst guard = (node: DNode): NodeWithProperties => {\n\tif (!node) {\n\t\tthrow Error('Node not found');\n\t}\n\tif (!isWNode(node) && !isVNode(node)) {\n\t\tthrow Error('Cannot set or get on unknown node');\n\t}\n\treturn node;\n};\n\nexport function assertionTemplate(renderFunc: () => DNode | DNode[]) {\n\tconst assertionTemplateResult: any = () => {\n\t\tconst render = renderFunc();\n\t\tdecorate(render, (node) => {\n\t\t\tif (isWNode(node) || isVNode(node)) {\n\t\t\t\tdelete (node as NodeWithProperties).properties['~key'];\n\t\t\t}\n\t\t});\n\t\treturn render;\n\t};\n\tassertionTemplateResult.setProperty = (selector: string, property: string, value: any) => {\n\t\tconst render = renderFunc();\n\t\tconst node = guard(findOne(render, selector));\n\t\tnode.properties[property] = value;\n\t\treturn assertionTemplate(() => render);\n\t};\n\tassertionTemplateResult.setChildren = (selector: string, children: DNode[]) => {\n\t\tconst render = renderFunc();\n\t\tconst node = guard(findOne(render, selector));\n\t\tnode.children = children;\n\t\treturn assertionTemplate(() => render);\n\t};\n\tassertionTemplateResult.getProperty = (selector: string, property: string) => {\n\t\tconst render = renderFunc();\n\t\tconst node = guard(findOne(render, selector));\n\t\treturn node.properties[property];\n\t};\n\tassertionTemplateResult.getChildren = (selector: string) => {\n\t\tconst render = renderFunc();\n\t\tconst node = guard(findOne(render, selector));\n\t\treturn node.children || [];\n\t};\n\treturn assertionTemplateResult as AssertionTemplateResult;\n}\n\nexport default assertionTemplate;\n"]}