import select from './support/selector';
import { isWNode, isVNode, decorate } from '../widget-core/d';
const findOne = (nodes, selector) => {
    if (selector.indexOf('~') === 0) {
        selector = `[\\~key='${selector.substr(1)}']`;
    }
    const [node] = select(selector, nodes);
    return node;
};
const guard = (node) => {
    if (!node) {
        throw Error('Node not found');
    }
    if (!isWNode(node) && !isVNode(node)) {
        throw Error('Cannot set or get on unknown node');
    }
    return node;
};
export function assertionTemplate(renderFunc) {
    const assertionTemplateResult = () => {
        const render = renderFunc();
        decorate(render, (node) => {
            if (isWNode(node) || isVNode(node)) {
                delete node.properties['~key'];
            }
        });
        return render;
    };
    assertionTemplateResult.setProperty = (selector, property, value) => {
        const render = renderFunc();
        const node = guard(findOne(render, selector));
        node.properties[property] = value;
        return assertionTemplate(() => render);
    };
    assertionTemplateResult.setChildren = (selector, children) => {
        const render = renderFunc();
        const node = guard(findOne(render, selector));
        node.children = children;
        return assertionTemplate(() => render);
    };
    assertionTemplateResult.getProperty = (selector, property) => {
        const render = renderFunc();
        const node = guard(findOne(render, selector));
        return node.properties[property];
    };
    assertionTemplateResult.getChildren = (selector) => {
        const render = renderFunc();
        const node = guard(findOne(render, selector));
        return node.children || [];
    };
    return assertionTemplateResult;
}
export default assertionTemplate;
//# sourceMappingURL=assertionTemplate.mjs.map