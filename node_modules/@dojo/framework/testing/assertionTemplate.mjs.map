{"version":3,"file":"assertionTemplate.mjs","sourceRoot":"","sources":["assertionTemplate.ts"],"names":[],"mappings":"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","sourcesContent":["import select from './support/selector';\nimport { isWNode, isVNode, decorate } from '../widget-core/d';\nimport { VNode, WNode, DNode } from '../widget-core/interfaces';\n\nexport interface AssertionTemplateResult {\n\t(): DNode | DNode[];\n\tsetChildren(selector: string, children: DNode[]): AssertionTemplateResult;\n\tsetProperty(selector: string, property: string, value: any): AssertionTemplateResult;\n\tgetChildren(selector: string): DNode[];\n\tgetProperty(selector: string, property: string): any;\n}\n\nconst findOne = (nodes: DNode | DNode[], selector: string): DNode | undefined => {\n\tif (selector.indexOf('~') === 0) {\n\t\tselector = `[\\\\~key='${selector.substr(1)}']`;\n\t}\n\tconst [node] = select(selector, nodes);\n\treturn node;\n};\n\ntype NodeWithProperties = (VNode | WNode) & { properties: { [index: string]: any } };\n\nconst guard = (node: DNode): NodeWithProperties => {\n\tif (!node) {\n\t\tthrow Error('Node not found');\n\t}\n\tif (!isWNode(node) && !isVNode(node)) {\n\t\tthrow Error('Cannot set or get on unknown node');\n\t}\n\treturn node;\n};\n\nexport function assertionTemplate(renderFunc: () => DNode | DNode[]) {\n\tconst assertionTemplateResult: any = () => {\n\t\tconst render = renderFunc();\n\t\tdecorate(render, (node) => {\n\t\t\tif (isWNode(node) || isVNode(node)) {\n\t\t\t\tdelete (node as NodeWithProperties).properties['~key'];\n\t\t\t}\n\t\t});\n\t\treturn render;\n\t};\n\tassertionTemplateResult.setProperty = (selector: string, property: string, value: any) => {\n\t\tconst render = renderFunc();\n\t\tconst node = guard(findOne(render, selector));\n\t\tnode.properties[property] = value;\n\t\treturn assertionTemplate(() => render);\n\t};\n\tassertionTemplateResult.setChildren = (selector: string, children: DNode[]) => {\n\t\tconst render = renderFunc();\n\t\tconst node = guard(findOne(render, selector));\n\t\tnode.children = children;\n\t\treturn assertionTemplate(() => render);\n\t};\n\tassertionTemplateResult.getProperty = (selector: string, property: string) => {\n\t\tconst render = renderFunc();\n\t\tconst node = guard(findOne(render, selector));\n\t\treturn node.properties[property];\n\t};\n\tassertionTemplateResult.getChildren = (selector: string) => {\n\t\tconst render = renderFunc();\n\t\tconst node = guard(findOne(render, selector));\n\t\treturn node.children || [];\n\t};\n\treturn assertionTemplateResult as AssertionTemplateResult;\n}\n\nexport default assertionTemplate;\n"]}