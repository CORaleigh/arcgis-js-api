{"version":3,"file":"HistoryManager.js","sourceRoot":"","sources":["HistoryManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { processExecutor, getProcess, ProcessError, ProcessResult, ProcessCallback } from '../process';\nimport { PatchOperation } from '../state/Patch';\nimport { Pointer } from '../state/Pointer';\nimport Store from '../Store';\nimport WeakMap from '../../shim/WeakMap';\n\nexport interface HistoryOperation {\n\tid: string;\n\toperations: PatchOperation[];\n}\n\nexport interface HistoryData {\n\thistory: HistoryOperation[];\n\tredo: HistoryOperation[];\n}\n\nexport class HistoryManager {\n\tprivate _storeMap = new WeakMap();\n\tprivate after = (error: ProcessError | null, result: ProcessResult) => {\n\t\tconst { operations, undoOperations, id, store } = result;\n\t\tconst { history, undo } = this._storeMap.get(store) || {\n\t\t\thistory: [],\n\t\t\tundo: []\n\t\t};\n\t\thistory.push({ id, operations });\n\t\tundo.push({ id, operations: undoOperations });\n\t\tthis._storeMap.set(store, { history, undo, redo: [] });\n\t};\n\n\tpublic callback: ProcessCallback = () => ({ after: this.after });\n\n\tpublic canUndo(store: Store): boolean {\n\t\tconst stacks = this._storeMap.get(store);\n\t\tif (stacks) {\n\t\t\tconst { history, undo } = stacks;\n\t\t\tif (undo.length && history.length) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic canRedo(store: Store): boolean {\n\t\tconst stacks = this._storeMap.get(store);\n\t\tif (stacks) {\n\t\t\tconst { redo } = stacks;\n\t\t\tif (redo.length) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic redo(store: Store) {\n\t\tconst stacks = this._storeMap.get(store);\n\t\tif (stacks) {\n\t\t\tconst { history, redo, undo } = stacks;\n\t\t\tif (redo.length) {\n\t\t\t\tconst { id, operations } = redo.pop();\n\t\t\t\tconst result = store.apply(operations);\n\t\t\t\thistory.push({ id, operations });\n\t\t\t\tundo.push({ id, operations: result });\n\t\t\t\tthis._storeMap.set(store, { history, undo, redo });\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic undo(store: Store) {\n\t\tconst stacks = this._storeMap.get(store);\n\t\tif (stacks) {\n\t\t\tconst { history, undo, redo } = stacks;\n\t\t\tif (undo.length && history.length) {\n\t\t\t\tconst { id, operations } = undo.pop();\n\t\t\t\thistory.pop();\n\t\t\t\tconst result = store.apply(operations);\n\t\t\t\tredo.push({ id, operations: result });\n\t\t\t\tthis._storeMap.set(store, { history, undo, redo });\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic deserialize(store: Store, data: HistoryData) {\n\t\tconst { history, redo } = data;\n\t\thistory.forEach(({ id, operations }: HistoryOperation) => {\n\t\t\toperations = operations.map((operation) => {\n\t\t\t\toperation.path = new Pointer(String(operation.path));\n\t\t\t\treturn operation;\n\t\t\t});\n\t\t\tlet before;\n\t\t\tlet after;\n\t\t\tconst process = getProcess(id);\n\t\t\tif (process) {\n\t\t\t\tbefore = process[2];\n\t\t\t\tafter = process[3];\n\t\t\t}\n\t\t\tprocessExecutor(id, [() => operations], store, before, after, undefined)({});\n\t\t});\n\t\tconst stacks = this._storeMap.get(store);\n\t\tredo.forEach(({ id, operations }: HistoryOperation) => {\n\t\t\toperations = operations.map((operation) => {\n\t\t\t\toperation.path = new Pointer(String(operation.path));\n\t\t\t\treturn operation;\n\t\t\t});\n\t\t});\n\t\tstacks.redo = redo;\n\t}\n\n\tpublic serialize(store: Store): HistoryData {\n\t\tconst stacks = this._storeMap.get(store);\n\t\tif (stacks) {\n\t\t\treturn {\n\t\t\t\thistory: stacks.history,\n\t\t\t\tredo: stacks.redo\n\t\t\t};\n\t\t}\n\t\treturn { history: [], redo: [] };\n\t}\n}\n\nexport default HistoryManager;\n"]}