import global from '../../shim/global';
import { processExecutor } from '../process';
import { add } from '../state/operations';
export function collector(id, getPaths) {
    return () => ({
        after: (error, result) => {
            const paths = getPaths(result.store.path);
            const data = paths.map((path) => {
                const state = result.get(path);
                return { meta: { path: path.path }, state };
            });
            global.localStorage.setItem(id, JSON.stringify(data));
        }
    });
}
export function load(id, store) {
    let data = global.localStorage.getItem(id);
    if (data) {
        try {
            const parsedData = JSON.parse(data);
            const operations = parsedData.map((item) => {
                return add(store.path(item.meta.path), item.state);
            });
            processExecutor('local-storage-load', [() => operations], store, undefined, undefined, undefined)({});
        }
        catch (_a) {
            // do nothing?
        }
    }
}
//# sourceMappingURL=localStorage.mjs.map