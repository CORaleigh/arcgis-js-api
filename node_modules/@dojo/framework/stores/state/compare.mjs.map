{"version":3,"file":"compare.mjs","sourceRoot":"","sources":["compare.ts"],"names":[],"mappings":"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","sourcesContent":["import Set from '../../shim/Set';\nimport { from } from '../../shim/array';\n\nexport function isObject(value: any): value is Object {\n\treturn Object.prototype.toString.call(value) === '[object Object]';\n}\n\nexport function isEqual(a: any, b: any): boolean {\n\tif (Array.isArray(a) && Array.isArray(b)) {\n\t\treturn a.length === b.length && a.every((element: any, i: number) => isEqual(element, b[i]));\n\t} else if (isObject(a) && isObject(b)) {\n\t\tconst keysForA = Object.keys(a).sort();\n\t\tconst keysForB = Object.keys(b).sort();\n\t\treturn isEqual(keysForA, keysForB) && keysForA.every((key) => isEqual(a[key], b[key]));\n\t} else {\n\t\treturn a === b;\n\t}\n}\n\nfunction findArrayDifference(a: any[], b: any[]): number {\n\tconst min = Math.min(a.length, b.length);\n\tfor (let i = 0; i < min; i++) {\n\t\tif (!isEqual(a[i], b[i])) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\tif (a.length !== b.length) {\n\t\treturn min;\n\t}\n\n\treturn -1;\n}\n\nfunction findShallowObjectKeyDifference(a: { [key: string]: any }, b: { [key: string]: any }): string | undefined {\n\tconst keys = from(new Set([...Object.keys(a), ...Object.keys(b)]).values());\n\n\tfor (let key of keys) {\n\t\tif (!isEqual(a[key], b[key])) {\n\t\t\treturn key;\n\t\t}\n\t}\n}\n\nexport function getFriendlyDifferenceMessage(expected: any, actual: any): string {\n\tconst actualType = getFriendlyTypeName(actual);\n\tconst expectedType = getFriendlyTypeName(expected);\n\n\tif (Array.isArray(expected) && Array.isArray(actual)) {\n\t\tconst offset = findArrayDifference(expected, actual);\n\n\t\tif (offset !== -1) {\n\t\t\treturn `Arrays differed at offset ${offset}`;\n\t\t}\n\t\treturn 'Arrays are identical';\n\t} else if (isObject(expected) && isObject(actual)) {\n\t\tconst key = findShallowObjectKeyDifference(expected, actual);\n\n\t\tif (key) {\n\t\t\tconst expectedValue = expected[key];\n\t\t\tconst actualValue = actual[key];\n\t\t\treturn `Expected \"${expectedValue}\" for object property ${key} but got \"${actualValue}\" instead`;\n\t\t}\n\t\treturn 'Objects are identical';\n\t} else if (!isEqual(expected, actual)) {\n\t\tif (actualType === expectedType) {\n\t\t\treturn `Expected \"${expected}\" but got \"${actual}\" instead`;\n\t\t} else {\n\t\t\treturn `Expected ${expectedType} \"${expected}\" but got ${actualType} \"${actual}\" instead`;\n\t\t}\n\t}\n\n\treturn 'Values are identical';\n}\n\nfunction getFriendlyTypeName(value: any): string {\n\tif (Array.isArray(value)) {\n\t\treturn 'array';\n\t}\n\treturn typeof value;\n}\n"]}