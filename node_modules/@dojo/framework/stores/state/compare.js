(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../../shim/Set", "../../shim/array"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var Set_1 = require("../../shim/Set");
    var array_1 = require("../../shim/array");
    function isObject(value) {
        return Object.prototype.toString.call(value) === '[object Object]';
    }
    exports.isObject = isObject;
    function isEqual(a, b) {
        if (Array.isArray(a) && Array.isArray(b)) {
            return a.length === b.length && a.every(function (element, i) { return isEqual(element, b[i]); });
        }
        else if (isObject(a) && isObject(b)) {
            var keysForA = Object.keys(a).sort();
            var keysForB = Object.keys(b).sort();
            return isEqual(keysForA, keysForB) && keysForA.every(function (key) { return isEqual(a[key], b[key]); });
        }
        else {
            return a === b;
        }
    }
    exports.isEqual = isEqual;
    function findArrayDifference(a, b) {
        var min = Math.min(a.length, b.length);
        for (var i = 0; i < min; i++) {
            if (!isEqual(a[i], b[i])) {
                return i;
            }
        }
        if (a.length !== b.length) {
            return min;
        }
        return -1;
    }
    function findShallowObjectKeyDifference(a, b) {
        var keys = array_1.from(new Set_1.default(tslib_1.__spread(Object.keys(a), Object.keys(b))).values());
        try {
            for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                if (!isEqual(a[key], b[key])) {
                    return key;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _a;
    }
    function getFriendlyDifferenceMessage(expected, actual) {
        var actualType = getFriendlyTypeName(actual);
        var expectedType = getFriendlyTypeName(expected);
        if (Array.isArray(expected) && Array.isArray(actual)) {
            var offset = findArrayDifference(expected, actual);
            if (offset !== -1) {
                return "Arrays differed at offset " + offset;
            }
            return 'Arrays are identical';
        }
        else if (isObject(expected) && isObject(actual)) {
            var key = findShallowObjectKeyDifference(expected, actual);
            if (key) {
                var expectedValue = expected[key];
                var actualValue = actual[key];
                return "Expected \"" + expectedValue + "\" for object property " + key + " but got \"" + actualValue + "\" instead";
            }
            return 'Objects are identical';
        }
        else if (!isEqual(expected, actual)) {
            if (actualType === expectedType) {
                return "Expected \"" + expected + "\" but got \"" + actual + "\" instead";
            }
            else {
                return "Expected " + expectedType + " \"" + expected + "\" but got " + actualType + " \"" + actual + "\" instead";
            }
        }
        return 'Values are identical';
    }
    exports.getFriendlyDifferenceMessage = getFriendlyDifferenceMessage;
    function getFriendlyTypeName(value) {
        if (Array.isArray(value)) {
            return 'array';
        }
        return typeof value;
    }
});
//# sourceMappingURL=compare.js.map