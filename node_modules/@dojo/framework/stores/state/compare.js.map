{"version":3,"file":"compare.js","sourceRoot":"","sources":["compare.ts"],"names":[],"mappings":"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","sourcesContent":["import Set from '../../shim/Set';\nimport { from } from '../../shim/array';\n\nexport function isObject(value: any): value is Object {\n\treturn Object.prototype.toString.call(value) === '[object Object]';\n}\n\nexport function isEqual(a: any, b: any): boolean {\n\tif (Array.isArray(a) && Array.isArray(b)) {\n\t\treturn a.length === b.length && a.every((element: any, i: number) => isEqual(element, b[i]));\n\t} else if (isObject(a) && isObject(b)) {\n\t\tconst keysForA = Object.keys(a).sort();\n\t\tconst keysForB = Object.keys(b).sort();\n\t\treturn isEqual(keysForA, keysForB) && keysForA.every((key) => isEqual(a[key], b[key]));\n\t} else {\n\t\treturn a === b;\n\t}\n}\n\nfunction findArrayDifference(a: any[], b: any[]): number {\n\tconst min = Math.min(a.length, b.length);\n\tfor (let i = 0; i < min; i++) {\n\t\tif (!isEqual(a[i], b[i])) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\tif (a.length !== b.length) {\n\t\treturn min;\n\t}\n\n\treturn -1;\n}\n\nfunction findShallowObjectKeyDifference(a: { [key: string]: any }, b: { [key: string]: any }): string | undefined {\n\tconst keys = from(new Set([...Object.keys(a), ...Object.keys(b)]).values());\n\n\tfor (let key of keys) {\n\t\tif (!isEqual(a[key], b[key])) {\n\t\t\treturn key;\n\t\t}\n\t}\n}\n\nexport function getFriendlyDifferenceMessage(expected: any, actual: any): string {\n\tconst actualType = getFriendlyTypeName(actual);\n\tconst expectedType = getFriendlyTypeName(expected);\n\n\tif (Array.isArray(expected) && Array.isArray(actual)) {\n\t\tconst offset = findArrayDifference(expected, actual);\n\n\t\tif (offset !== -1) {\n\t\t\treturn `Arrays differed at offset ${offset}`;\n\t\t}\n\t\treturn 'Arrays are identical';\n\t} else if (isObject(expected) && isObject(actual)) {\n\t\tconst key = findShallowObjectKeyDifference(expected, actual);\n\n\t\tif (key) {\n\t\t\tconst expectedValue = expected[key];\n\t\t\tconst actualValue = actual[key];\n\t\t\treturn `Expected \"${expectedValue}\" for object property ${key} but got \"${actualValue}\" instead`;\n\t\t}\n\t\treturn 'Objects are identical';\n\t} else if (!isEqual(expected, actual)) {\n\t\tif (actualType === expectedType) {\n\t\t\treturn `Expected \"${expected}\" but got \"${actual}\" instead`;\n\t\t} else {\n\t\t\treturn `Expected ${expectedType} \"${expected}\" but got ${actualType} \"${actual}\" instead`;\n\t\t}\n\t}\n\n\treturn 'Values are identical';\n}\n\nfunction getFriendlyTypeName(value: any): string {\n\tif (Array.isArray(value)) {\n\t\treturn 'array';\n\t}\n\treturn typeof value;\n}\n"]}