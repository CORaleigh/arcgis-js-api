{"version":3,"file":"Patch.js","sourceRoot":"","sources":["Patch.ts"],"names":[],"mappings":"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","sourcesContent":["import { Pointer, walk, PointerTarget } from './Pointer';\nimport { getFriendlyDifferenceMessage, isEqual } from './compare';\n\nexport enum OperationType {\n\tADD = 'add',\n\tREMOVE = 'remove',\n\tREPLACE = 'replace',\n\tTEST = 'test'\n}\n\nexport interface BaseOperation<T = any, U = any> {\n\top: OperationType;\n\tpath: Pointer<T, U>;\n}\n\nexport interface AddPatchOperation<T = any, U = any> extends BaseOperation<T, U> {\n\top: OperationType.ADD;\n\tvalue: U;\n}\n\nexport interface RemovePatchOperation<T = any, U = any> extends BaseOperation<T, U> {\n\top: OperationType.REMOVE;\n}\n\nexport interface ReplacePatchOperation<T = any, U = any> extends BaseOperation<T, U> {\n\top: OperationType.REPLACE;\n\tvalue: U;\n}\n\nexport interface TestPatchOperation<T = any, U = any> extends BaseOperation<T, U> {\n\top: OperationType.TEST;\n\tvalue: U;\n}\n\nexport type PatchOperation<T = any, U = any> =\n\t| AddPatchOperation<T, U>\n\t| RemovePatchOperation<T, U>\n\t| ReplacePatchOperation<T, U>\n\t| TestPatchOperation<T, U>;\n\nexport interface PatchResult<T = any, U = any> {\n\tobject: T;\n\tundoOperations: PatchOperation<T, U>[];\n}\n\nfunction add(pointerTarget: PointerTarget, value: any): any {\n\tif (Array.isArray(pointerTarget.target)) {\n\t\tpointerTarget.target.splice(parseInt(pointerTarget.segment, 10), 0, value);\n\t} else {\n\t\tpointerTarget.target[pointerTarget.segment] = value;\n\t}\n\treturn pointerTarget.object;\n}\n\nfunction replace(pointerTarget: PointerTarget, value: any): any {\n\tif (Array.isArray(pointerTarget.target)) {\n\t\tpointerTarget.target.splice(parseInt(pointerTarget.segment, 10), 1, value);\n\t} else {\n\t\tpointerTarget.target[pointerTarget.segment] = value;\n\t}\n\treturn pointerTarget.object;\n}\n\nfunction remove(pointerTarget: PointerTarget): any {\n\tif (Array.isArray(pointerTarget.target)) {\n\t\tpointerTarget.target.splice(parseInt(pointerTarget.segment, 10), 1);\n\t} else {\n\t\tdelete pointerTarget.target[pointerTarget.segment];\n\t}\n\treturn pointerTarget.object;\n}\n\nfunction inverse(operation: PatchOperation, state: any): PatchOperation[] {\n\tif (operation.op === OperationType.ADD) {\n\t\tconst op: RemovePatchOperation = {\n\t\t\top: OperationType.REMOVE,\n\t\t\tpath: operation.path\n\t\t};\n\t\tconst test: TestPatchOperation = {\n\t\t\top: OperationType.TEST,\n\t\t\tpath: operation.path,\n\t\t\tvalue: operation.value\n\t\t};\n\t\treturn [test, op];\n\t} else if (operation.op === OperationType.REPLACE) {\n\t\tconst value = operation.path.get(state);\n\t\tlet op: RemovePatchOperation | ReplacePatchOperation;\n\t\tif (value === undefined) {\n\t\t\top = {\n\t\t\t\top: OperationType.REMOVE,\n\t\t\t\tpath: operation.path\n\t\t\t};\n\t\t} else {\n\t\t\top = {\n\t\t\t\top: OperationType.REPLACE,\n\t\t\t\tpath: operation.path,\n\t\t\t\tvalue: operation.path.get(state)\n\t\t\t};\n\t\t}\n\t\tconst test: TestPatchOperation = {\n\t\t\top: OperationType.TEST,\n\t\t\tpath: operation.path,\n\t\t\tvalue: operation.value\n\t\t};\n\t\treturn [test, op];\n\t} else {\n\t\treturn [\n\t\t\t{\n\t\t\t\top: OperationType.ADD,\n\t\t\t\tpath: operation.path,\n\t\t\t\tvalue: operation.path.get(state)\n\t\t\t}\n\t\t];\n\t}\n}\n\nexport class Patch<T = any> {\n\tprivate _operations: PatchOperation<T>[];\n\n\tconstructor(operations: PatchOperation<T> | PatchOperation<T>[]) {\n\t\tthis._operations = Array.isArray(operations) ? operations : [operations];\n\t}\n\n\tpublic apply(object: any): PatchResult<T> {\n\t\tlet undoOperations: PatchOperation<T>[] = [];\n\t\tconst patchedObject = this._operations.reduce((patchedObject, next) => {\n\t\t\tlet object;\n\t\t\tconst pointerTarget = walk(next.path.segments, patchedObject);\n\t\t\tswitch (next.op) {\n\t\t\t\tcase OperationType.ADD:\n\t\t\t\t\tobject = add(pointerTarget, next.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.REPLACE:\n\t\t\t\t\tobject = replace(pointerTarget, next.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.REMOVE:\n\t\t\t\t\tobject = remove(pointerTarget);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.TEST:\n\t\t\t\t\tconst current = pointerTarget.target[pointerTarget.segment];\n\t\t\t\t\tif (!isEqual(current, next.value)) {\n\t\t\t\t\t\tconst location = next.path.path;\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Test operation failure at \"${location}\". ${getFriendlyDifferenceMessage(\n\t\t\t\t\t\t\t\tnext.value,\n\t\t\t\t\t\t\t\tcurrent\n\t\t\t\t\t\t\t)}.`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn patchedObject;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Unknown operation');\n\t\t\t}\n\t\t\tundoOperations = [...inverse(next, patchedObject), ...undoOperations];\n\t\t\treturn object;\n\t\t}, object);\n\t\treturn { object: patchedObject, undoOperations };\n\t}\n}\n"]}