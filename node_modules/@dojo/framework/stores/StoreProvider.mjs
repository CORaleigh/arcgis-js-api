import * as tslib_1 from "tslib";
import WidgetBase from '../widget-core/WidgetBase';
import { diffProperty } from '../widget-core/decorators/diffProperty';
import { shallow } from '../widget-core/diff';
import { alwaysRender } from '../widget-core/decorators/alwaysRender';
function mockPath(...paths) {
    return paths.join(',');
}
function pathDiff(previousProperty, newProperty) {
    const previousPaths = previousProperty ? previousProperty(mockPath) : [];
    const currentPaths = newProperty ? newProperty(mockPath) : [];
    const result = shallow(previousPaths, currentPaths);
    return {
        changed: result.changed,
        value: newProperty
    };
}
let StoreProvider = class StoreProvider extends WidgetBase {
    _getStore(key) {
        const item = this.registry.getInjector(key);
        if (item) {
            return item.injector();
        }
    }
    onChange(previousProperties, currentProperties) {
        const { stateKey, paths } = currentProperties;
        if (this._handle) {
            this._handle.destroy();
            this._handle = undefined;
        }
        const store = this._getStore(stateKey);
        if (store) {
            if (paths) {
                const handle = store.onChange(paths(store.path), () => this.invalidate());
                this._handle = {
                    destroy: () => {
                        handle.remove();
                    }
                };
            }
            else {
                this._handle = store.on('invalidate', () => {
                    this.invalidate();
                });
            }
            this.own(this._handle);
        }
    }
    render() {
        const { stateKey, renderer } = this.properties;
        const store = this._getStore(stateKey);
        if (store) {
            return renderer(store);
        }
    }
};
tslib_1.__decorate([
    diffProperty('stateKey'),
    diffProperty('paths', pathDiff)
], StoreProvider.prototype, "onChange", null);
StoreProvider = tslib_1.__decorate([
    alwaysRender()
], StoreProvider);
export { StoreProvider };
export default StoreProvider;
//# sourceMappingURL=StoreProvider.mjs.map