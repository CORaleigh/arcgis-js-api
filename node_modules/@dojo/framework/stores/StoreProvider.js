(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../widget-core/WidgetBase", "../widget-core/decorators/diffProperty", "../widget-core/diff", "../widget-core/decorators/alwaysRender"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var WidgetBase_1 = require("../widget-core/WidgetBase");
    var diffProperty_1 = require("../widget-core/decorators/diffProperty");
    var diff_1 = require("../widget-core/diff");
    var alwaysRender_1 = require("../widget-core/decorators/alwaysRender");
    function mockPath() {
        var paths = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            paths[_i] = arguments[_i];
        }
        return paths.join(',');
    }
    function pathDiff(previousProperty, newProperty) {
        var previousPaths = previousProperty ? previousProperty(mockPath) : [];
        var currentPaths = newProperty ? newProperty(mockPath) : [];
        var result = diff_1.shallow(previousPaths, currentPaths);
        return {
            changed: result.changed,
            value: newProperty
        };
    }
    var StoreProvider = /** @class */ (function (_super) {
        tslib_1.__extends(StoreProvider, _super);
        function StoreProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        StoreProvider.prototype._getStore = function (key) {
            var item = this.registry.getInjector(key);
            if (item) {
                return item.injector();
            }
        };
        StoreProvider.prototype.onChange = function (previousProperties, currentProperties) {
            var _this = this;
            var stateKey = currentProperties.stateKey, paths = currentProperties.paths;
            if (this._handle) {
                this._handle.destroy();
                this._handle = undefined;
            }
            var store = this._getStore(stateKey);
            if (store) {
                if (paths) {
                    var handle_1 = store.onChange(paths(store.path), function () { return _this.invalidate(); });
                    this._handle = {
                        destroy: function () {
                            handle_1.remove();
                        }
                    };
                }
                else {
                    this._handle = store.on('invalidate', function () {
                        _this.invalidate();
                    });
                }
                this.own(this._handle);
            }
        };
        StoreProvider.prototype.render = function () {
            var _a = this.properties, stateKey = _a.stateKey, renderer = _a.renderer;
            var store = this._getStore(stateKey);
            if (store) {
                return renderer(store);
            }
        };
        tslib_1.__decorate([
            diffProperty_1.diffProperty('stateKey'),
            diffProperty_1.diffProperty('paths', pathDiff)
        ], StoreProvider.prototype, "onChange", null);
        StoreProvider = tslib_1.__decorate([
            alwaysRender_1.alwaysRender()
        ], StoreProvider);
        return StoreProvider;
    }(WidgetBase_1.default));
    exports.StoreProvider = StoreProvider;
    exports.default = StoreProvider;
});
//# sourceMappingURL=StoreProvider.js.map