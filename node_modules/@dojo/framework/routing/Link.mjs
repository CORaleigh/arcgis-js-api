import * as tslib_1 from "tslib";
import { WidgetBase } from '../widget-core/WidgetBase';
import { v } from '../widget-core/d';
export class Link extends WidgetBase {
    _getProperties() {
        let _a = this.properties, { routerKey = 'router', to, isOutlet = true, target, params = {}, onClick } = _a, props = tslib_1.__rest(_a, ["routerKey", "to", "isOutlet", "target", "params", "onClick"]);
        const item = this.registry.getInjector(routerKey);
        let href = to;
        if (item) {
            const router = item.injector();
            if (isOutlet) {
                href = router.link(href, params);
            }
            const onclick = (event) => {
                onClick && onClick(event);
                if (!event.defaultPrevented && event.button === 0 && !event.metaKey && !event.ctrlKey && !target) {
                    event.preventDefault();
                    href !== undefined && router.setPath(href);
                }
            };
            return Object.assign({}, props, { onclick, href });
        }
        return Object.assign({}, props, { href });
    }
    render() {
        return v('a', this._getProperties(), this.children);
    }
}
export default Link;
//# sourceMappingURL=Link.mjs.map