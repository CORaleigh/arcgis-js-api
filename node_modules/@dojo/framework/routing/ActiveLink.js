(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../widget-core/WidgetBase", "../widget-core/d", "../widget-core/decorators/diffProperty", "./Link"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var WidgetBase_1 = require("../widget-core/WidgetBase");
    var d_1 = require("../widget-core/d");
    var diffProperty_1 = require("../widget-core/decorators/diffProperty");
    var Link_1 = require("./Link");
    function paramsEqual(linkParams, contextParams) {
        if (linkParams === void 0) { linkParams = {}; }
        if (contextParams === void 0) { contextParams = {}; }
        return Object.keys(linkParams).every(function (key) { return linkParams[key] === contextParams[key]; });
    }
    var ActiveLink = /** @class */ (function (_super) {
        tslib_1.__extends(ActiveLink, _super);
        function ActiveLink() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ActiveLink.prototype._renderLink = function (isActive) {
            if (isActive === void 0) { isActive = false; }
            var _a = this.properties, activeClasses = _a.activeClasses, _b = _a.classes, classes = _b === void 0 ? [] : _b, props = tslib_1.__rest(_a, ["activeClasses", "classes"]);
            classes = Array.isArray(classes) ? classes : [classes];
            if (isActive) {
                classes = tslib_1.__spread(classes, activeClasses);
            }
            props = tslib_1.__assign({}, props, { classes: classes });
            return d_1.w(Link_1.default, props, this.children);
        };
        ActiveLink.prototype._onOutletPropertyChange = function (previous, current) {
            var _this = this;
            var to = current.to, _a = current.routerKey, routerKey = _a === void 0 ? 'router' : _a;
            var item = this.registry.getInjector(routerKey);
            if (this._outletHandle) {
                this._outletHandle.destroy();
                this._outletHandle = undefined;
            }
            if (item) {
                var router = item.injector();
                this._outletHandle = router.on('outlet', function (_a) {
                    var outlet = _a.outlet;
                    if (outlet.id === to) {
                        _this.invalidate();
                    }
                });
            }
        };
        ActiveLink.prototype.render = function () {
            var _a = this.properties, to = _a.to, _b = _a.routerKey, routerKey = _b === void 0 ? 'router' : _b, params = _a.params;
            var item = this.registry.getInjector(routerKey);
            if (!item) {
                return this._renderLink();
            }
            var router = item.injector();
            var context = router.getOutlet(to);
            var isActive = context && paramsEqual(params, context.params);
            return this._renderLink(isActive);
        };
        tslib_1.__decorate([
            diffProperty_1.default('to')
        ], ActiveLink.prototype, "_onOutletPropertyChange", null);
        return ActiveLink;
    }(WidgetBase_1.default));
    exports.ActiveLink = ActiveLink;
    exports.default = ActiveLink;
});
//# sourceMappingURL=ActiveLink.js.map