import global from '../../shim/global';
import has from '../../has/has';
const trailingSlash = new RegExp(/\/$/);
const leadingSlash = new RegExp(/^\//);
function stripBase(base, path) {
    if (base === '/') {
        return path;
    }
    if (path.indexOf(base) === 0) {
        return path.slice(base.length - 1);
    }
    return '/';
}
export class StateHistory {
    constructor({ onChange, window = global.window, base }) {
        this._onChange = () => {
            const pathName = this._window.location.pathname.replace(/\/$/, '');
            const value = stripBase(this._base, pathName + this._window.location.search);
            if (this._current === value) {
                return;
            }
            this._current = value;
            this._onChangeFunction(this._current);
        };
        if (!base) {
            base = has('public-path') ? `${has('public-path')}` : '/';
        }
        if (/(#|\?)/.test(base)) {
            throw new TypeError("base must not contain '#' or '?'");
        }
        this._onChangeFunction = onChange;
        this._window = window;
        this._base = base;
        if (!trailingSlash.test(this._base)) {
            this._base = `${this._base}/`;
        }
        if (!leadingSlash.test(this._base)) {
            this._base = `/${this._base}`;
        }
        this._window.addEventListener('popstate', this._onChange, false);
        this._onChange();
    }
    prefix(path) {
        if (path[0] === '#') {
            path = path.slice(1);
        }
        if (path[0] === '/') {
            path = path.slice(1);
        }
        return `${this._base}${path}`;
    }
    set(path) {
        this._window.history.pushState({}, '', this.prefix(stripBase(this._base, path)));
        this._onChange();
    }
    get current() {
        return this._current;
    }
}
export default StateHistory;
//# sourceMappingURL=StateHistory.mjs.map