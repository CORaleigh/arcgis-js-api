import * as tslib_1 from "tslib";
import { WidgetBase } from '../widget-core/WidgetBase';
import { alwaysRender } from '../widget-core/decorators/alwaysRender';
import { diffProperty } from '../widget-core/decorators/diffProperty';
let Outlet = class Outlet extends WidgetBase {
    onRouterKeyChange(current, next) {
        const { routerKey = 'router' } = next;
        const item = this.registry.getInjector(routerKey);
        if (this._handle) {
            this._handle.destroy();
            this._handle = undefined;
        }
        if (item) {
            this._handle = item.invalidator.on('invalidate', () => {
                this.invalidate();
            });
            this.own(this._handle);
        }
    }
    onAttach() {
        if (!this._handle) {
            this.onRouterKeyChange(this.properties, this.properties);
        }
    }
    render() {
        const { renderer, id, routerKey = 'router' } = this.properties;
        const item = this.registry.getInjector(routerKey);
        if (item) {
            const router = item.injector();
            const outletContext = router.getOutlet(id);
            if (outletContext) {
                const { queryParams, params, type, isError, isExact } = outletContext;
                const result = renderer({ queryParams, params, type, isError, isExact, router });
                if (result) {
                    return result;
                }
            }
        }
        return null;
    }
};
tslib_1.__decorate([
    diffProperty('routerKey')
], Outlet.prototype, "onRouterKeyChange", null);
Outlet = tslib_1.__decorate([
    alwaysRender()
], Outlet);
export { Outlet };
export default Outlet;
//# sourceMappingURL=Outlet.mjs.map